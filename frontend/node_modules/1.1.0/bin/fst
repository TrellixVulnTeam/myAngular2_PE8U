#!/usr/bin/env node

const Default_Port = 8080;
const path = require("path");
const util = require("../util");
const fs = require("fs");
const mkdirp = require("mkdirp");
const rimraf = require("rimraf");
const argv = require("yargs")
    .option("f", {
        alias: "front",
        describe: "前端代码"
    })
    .option("e", {
        alias: "end",
        describe: "后端代码"
    })
    .option("p", {
        alias: "port",
        default: Default_Port,
        describe: "服务器端口"
    })
    .option('m', {
        alias: "mock",
        describe: "模拟服务器目录"
    })
    .command(["add", "a"], "新增模块", (yargs) => {

    }, (argv) => {
        // console.log(argv);
        let _ = argv["_"];
        _.shift();
        let ifFront = argv['f'];
        let ifEnd = argv['e'];
        if (ifFront == undefined && ifEnd == undefined) {
            ifFront = true;
            ifEnd = true;
        };
        if (ifFront) {
            util.initFrontModule(_);
        }
        if (ifEnd) {
            util.initEndModule(_);
        }
    })
    .command(["server", "s"], "开启服务器", (yargs) => {

    }, (argv) => {

    })
    .command(["init", "i"], "初始化", (yargs) => {
        yargs.option("s", {
                alias: "src",
                default: "src",
                describe: "原文件所在目录",
            })
            .option("d", {
                alias: "dest",
                default: "dest",
                describe: "编译文件所在目录"
            })
            .option("f", {
                alias: "front",
                describe: "前端代码的目录名称",
                default: "front"
            })
            .option("e", {
                alias: "end",
                describe: "后端代码的目录名称",
                default: "end"
            })
            .help("help")
    }, (argv) => {
        util.init().then((obj) => {
            let configPath = path.join(process.cwd(), "fst.config.js");
            let fstConfig = obj[configPath].value;
            fstConfig.src = argv.src;
            fstConfig.dest = argv.dest;
            fstConfig.front = argv.front;
            fstConfig.end = argv.end;
            fstConfig.relativeFiles = [];
            fstConfig.relativeDirectorys = [];
            let srcFrontPath = path.join(process.cwd(), path.join(argv.src, argv.front));
            let srcEndPath = path.join(process.cwd(), path.join(argv.src, argv.end));
            let destFrontPath = path.join(process.cwd(), path.join(argv.dest, argv.front));
            let destEndPath = path.join(process.cwd(), path.join(argv.dest, argv.end));
            fstConfig.relativeDirectorys.push(srcFrontPath)
            fstConfig.relativeDirectorys.push(srcEndPath)
            fstConfig.relativeDirectorys.push(destFrontPath)
            fstConfig.relativeDirectorys.push(destEndPath)
            fstConfig.relativeDirectorys.push(path.join(process.cwd(), argv.dest))
            fstConfig.relativeDirectorys.push(path.join(process.cwd(), argv.src))
            mkdirp(srcFrontPath);
            mkdirp(srcEndPath);
            mkdirp(destFrontPath);
            mkdirp(destEndPath);
            for (let filepath in obj) {
                fstConfig.relativeFiles.push(filepath);
                if (filepath != configPath) {
                    let isObj = obj[filepath].isObj;
                    let isJs = obj[filepath].isJs;
                    let value = isObj ? JSON.stringify(obj[filepath].value, null, 4) : obj[filepath].value;
                    // 写入文件
                    fs.writeFile(filepath, isJs ? `module.exports = ${value}` : value, 'utf8');;
                }
            };
            fs.writeFile(configPath, `module.exports = ${JSON.stringify(fstConfig,null,4)}`)
            var exec = require('child_process').exec;
            exec("npm install -dd")
                .on("data", function(d) {
                    console.log(d);
                });
        });
    })
    .command(["build", "b"], "初始化", (yargs) => {
        yargs.option("all", {
                alias: "a",
            })
            .option("watch", {
                alias: "w"
            })
            .option("port", {
                alias: "p",
                default: "8899"
            })
            .option("host", {
                alias: "h",
                default: "localhost"
            })
    }, (argv) => {
        function build(modulename) {
            let isFront = argv['front'];
            let isEnd = argv["end"];
            // 都没有指定
            if (isFront == undefined && isEnd == undefined) {
                isFront = true;
                isEnd = true;
            };
            if (isFront) {
                util.buildFront(modulename, argv['w'], +argv['port'], argv['host']);
            }
            if (isEnd) {
                util.buildEnd(modulename, argv['w']);
            }
        }
        if (argv['a']) {
            let fstConfig = require(path.join(process.cwd(), "fst.config.js"));
            let dir = fs.readdirSync(path.join(process.cwd(), path.join(fstConfig.src, "front")));
            dir.forEach((modulename) => {
                build(modulename);
            })
        } else {
            build(argv["_"][1]);
        }
    })
    .command(["delete", 'd'], "删除、清空", (yargs) => {
        yargs.option("directory", {
                alias: "d"
            })
            .option("file", {
                alias: "f"
            })
            .option("package", {
                alias: "p"
            })
    }, (argv) => {
        const fileExists = require("file-exists");
        let configPath = path.join(process.cwd(), "fst.config.js");
        if (fileExists.sync(configPath)) {
            let config = require(configPath);
            let isDirectory = argv['directory'];
            let isFile = argv["file"];
            if (isDirectory == undefined && isFile == undefined) {
                isDirectory = true;
                isFile = true;
            }
            isFile && config.relativeFiles.forEach((filepath, index) => {
                let base = path.basename(filepath);
                if (base == "package.json") {

                } else {
                    rimraf(filepath, () => {});
                }
            });
            isDirectory && config.relativeDirectorys.forEach((filepath, index) => {
                rimraf(filepath, () => {});
            });
        };
        if (argv["package"]) {
            rimraf(path.join(process.cwd(), "package.json"), function() {})
        }
    })
    .option("c", {
        alias: "config",
        describe: "指定配置文件"
    })
    .option("prod", {
        default: false,
        describe: "是否是生产环境"
    })
    .option("dev", {
        default: true,
        describe: "是否是办公环境"
    })
    .help("help")
    .argv;